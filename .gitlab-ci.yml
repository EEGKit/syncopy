stages:
    - single
    - slurm
    - upload
    - deploy

variables:
    TEST_DIR: "$CI_PROJECT_DIR/syncopy/tests"
    REL_TEST_DIR: "syncopy/tests"
    
intellinux:
    stage: single
    allow_failure: true
    tags:
    - deploy
    only:
    - master
    - dev
    variables:
        PYTEST_ADDOPTS: "--color=yes --tb=short --verbose"
        GIT_FETCH_EXTRA_FLAGS: --tags
        NO_SLURM: "true"
    script:
    - rm -rf ~/.spy
    - source $HOME/miniconda/etc/profile.d/conda.sh
    - conda clean --all -y
    - conda env update -f syncopy.yml --prune
    - conda activate syncopy
    - export PYTHONPATH=$CI_PROJECT_DIR
    - pytest -ra -k 'not parallel'
    - pytest -ra -k 'parallel'

powerlinux:
    stage: single
    allow_failure: true
    tags:
    - power
    only:
    - master
    - dev
    variables:
        PYTEST_ADDOPTS: "--color=yes --tb=short --verbose"
        GIT_FETCH_EXTRA_FLAGS: --tags
    script:
    - rm -rf ~/.spy
    - source /opt/conda/etc/profile.d/conda.sh
    - conda clean --all -y
    - conda env update -f syncopy.yml --prune
    - conda activate syncopy
    - export PYTHONPATH=$CI_PROJECT_DIR
    - pytest -ra -k 'not parallel'
    - pytest -ra -k 'parallel'

intelwin:
    stage: single
    allow_failure: true
    tags:
    - windows10
    only:
    - master
    - dev
    variables:
        PYTEST_ADDOPTS: "--color=yes --tb=short --verbose"
        GIT_FETCH_EXTRA_FLAGS: --tags
    script:
    - conda clean --all -y
    - conda env update --prefix ./env -f syncopy.yml --prune
    # - conda install virtualenv
    # - set PYTHONPATH=%PYTHONPATH%;$CI_PROJECT_DIR
    - cmd /k call conda.bat activate syncopy "&" conda list
    # point tox to python from the conda env
    # needs to be done only once
    # - cmd /c mklink /J C:\Python38 %CONDA_PREFIX%
    - conda.bat activate syncopy "&" pytest -ra -k 'not parallel' $TEST_DIR
    - conda.bat activate syncopy "&" pytest -ra -k 'parallel' $TEST_DIR        

m1macos:
    stage: single
    allow_failure: true
    tags:
    - macos
    only:
    - master
    - dev
    variables:
        PYTEST_ADDOPTS: "--color=yes --tb=short --verbose"
        GIT_FETCH_EXTRA_FLAGS: --tags
    script:
    - ulimit -n 25000
    - rm -rf ~/.spy
    - source /opt/conda/etc/profile.d/conda.sh
    - conda clean --all -y
    - conda env update -f syncopy.yml --prune
    - conda activate syncopy
    - export PYTHONPATH=$CI_PROJECT_DIR
    - pytest -ra -k 'not parallel'
    - pytest -ra -k 'parallel'

slurmtest:
    stage: slurm
    allow_failure: true
    tags:
    - slurm
    only:
    - master
    - dev
    variables:
        PYTEST_ADDOPTS: "--color=yes --tb=short --verbose"
        GIT_FETCH_EXTRA_FLAGS: --tags
    script:
    - source /opt/conda/etc/profile.d/conda.sh
    - conda env update -f syncopy.yml --prune
    - conda activate syncopy
    - export PYTHONPATH=$CI_PROJECT_DIR
    - srun -p DEV --mem=8000m pytest -ra $TEST_DIR/test_specest.py
    - srun -p DEV --mem=8000m pytest -ra $TEST_DIR/test_connectivity.py
    - srun -p DEV pytest -ra --ignore=$REL_TEST_DIR/test_specest.py --ignore=$REL_TEST_DIR/test_connectivity.py
    
slurmtest-acme:
    stage: slurm
    allow_failure: true
    tags:
    - slurm
    only:
    - master
    - dev
    variables:
        PYTEST_ADDOPTS: "--color=yes --tb=short --verbose"
        GIT_FETCH_EXTRA_FLAGS: --tags
    script:
    - source /opt/conda/etc/profile.d/conda.sh
    - conda env update -f syncopy.yml --prune
    - conda activate syncopy
    - conda install esi-acme=2022.11 -c conda-forge
    - export PYTHONPATH=$CI_PROJECT_DIR
    - srun -p DEV --mem=8000m pytest -ra $TEST_DIR/test_specest.py
    - srun -p DEV --mem=8000m pytest -ra $TEST_DIR/test_connectivity.py
    - srun -p DEV pytest -ra --ignore=$REL_TEST_DIR/test_specest.py --ignore=$REL_TEST_DIR/test_connectivity.py

pypitest:
    stage: upload
    when: manual
    only:
    - master
    - dev
    tags:
    - deploy
    variables:
        GIT_FETCH_EXTRA_FLAGS: --tags
    script:
    - rm -rf dist/
    - source $HOME/miniconda/etc/profile.d/conda.sh
    # get poetry with python 3.10
    - conda create --yes --name syncopy-deploy python=3.10 poetry=1.4.0
    - conda activate syncopy-deploy
    - poetry build
    # needs pypi token as env variable in GitLab CI config
    - poetry config repositories.testpypi https://test.pypi.org/legacy/
    - poetry config pypi-token.testpypi $TESTPYPI_SECRET
    - poetry publish -r testpypi
    - sleep 300
    # create clean new env and install the pypitest package
    - conda create --yes --name piptest python=3.10
    - conda activate piptest
    - conda install --yes pip
    - version=$(grep 'version =' pyproject.toml | awk -F "\"" '{print $2}')
    - pip --no-cache-dir install --extra-index-url https://test.pypi.org/simple esi-syncopy==$version
    # move out of project dir
    - cd $HOME
    - python -c "import syncopy as spy"
    - conda deactivate
    - conda remove --yes --name piptest --all

pypideploy:
    stage: deploy
    when: manual
    only:
    - master
    tags:
    - deploy
    variables:
        GIT_FETCH_EXTRA_FLAGS: --tags
    script:
    - rm -rf dist/
    - source $HOME/miniconda/etc/profile.d/conda.sh
    # get poetry with python 3.10
    - conda activate syncopy-deploy
    - poetry build
    # needs config pypi credentials on runner
    - poetry publish -r pypi
